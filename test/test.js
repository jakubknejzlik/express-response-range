// Generated by CoffeeScript 1.10.0
(function() {
  var assert, data, supertest, test, testAlwaysRange;

  assert = require('assert');

  supertest = require('supertest');

  data = require('./test-app').data;

  test = supertest(require('./test-app')());
  testZeroBased = supertest(
    require('./test-app')({ zeroBasePagination: true })
  );

  testAlwaysRange = supertest(
    require('./test-app')({
      defaultLimit: 20,
      maxLimit: 21,
      alwaysSendRange: true
    })
  );

  describe('express-content-range', function() {
    it('should get valid range', function() {
      var range;
      range = {
        unit: 'items',
        offset: 25,
        limit: 10
      };
      return test
        .get('/range')
        .set('Range', 'items=25-34')
        .expect(200)
        .expect(function(res) {
          return assert.deepEqual(res.body, range);
        });
    });
    it('should get valid range for query', function() {
      var range;
      range = {
        offset: 45,
        limit: 15,
        page: 4,
        unit: 'items'
      };
      return test
        .get('/range?limit=15&page=4')
        .expect(200)
        .expect(function(res) {
          return assert.deepEqual(res.body, range);
        });
    });
    it('should get valid content/range', function() {
      return test
        .get('/')
        .set('Range', 'items=0-3')
        .expect(206)
        .expect(function(res) {
          assert.equal(res.headers['content-range'], 'items 0-3/*');
          return assert.deepEqual(res.body, data.slice(0, 4));
        });
    });
    it('should get valid content/range for query', function() {
      return test
        .get('/?limit=2&page=2')
        .expect(200)
        .expect(function(res) {
          return assert.deepEqual(res.body.items, data.slice(2, 4));
        });
    });
    it('should get valid content/range/length for closed interval', function() {
      return test
        .get('/known-length')
        .set('Range', 'items=0-3')
        .expect(206)
        .expect(function(res) {
          assert.equal(res.headers['content-range'], 'items 0-3/30');
          return assert.deepEqual(res.body, data.slice(0, 4));
        });
    });
    it('should get valid content/range/length for opened interval', function() {
      return test
        .get('/known-length')
        .set('Range', 'items=0-')
        .expect(206)
        .expect(function(res) {
          assert.equal(res.headers['content-range'], 'items 0-9/30');
          return assert.deepEqual(res.body, data.slice(0, 10));
        });
    });
    it('should get valid content/range/length for opened offset interval', function() {
      return test
        .get('/known-length')
        .set('Range', 'items=5-')
        .expect(206)
        .expect(function(res) {
          assert.equal(res.headers['content-range'], 'items 5-14/30');
          return assert.deepEqual(res.body, data.slice(5, 15));
        });
    });
    it('should get valid content/range/length for query', function() {
      return test
        .get('/known-length?limit=2&page=2')
        .expect(200)
        .expect(function(res) {
          assert.deepEqual(res.body.items, data.slice(2, 4));
          assert.equal(res.body.page, 2);
        });
    });
    it('should get valid content/range/length for query with page=1', function() {
      return test
        .get('/known-length?limit=2&page=1')
        .expect(200)
        .expect(function(res) {
          assert.deepEqual(res.body.items, data.slice(0, 2));
          assert.equal(res.body.page, 1);
        });
    });
    it('should get valid content/range/length for zero based query with page=0', function() {
      return testZeroBased
        .get('/known-length?limit=2&page=0')
        .expect(200)
        .expect(function(res) {
          assert.deepEqual(res.body.items, data.slice(0, 2));
          assert.equal(res.body.page, 0);
        });
    });

    it('should get valid content/range/length  for zero based query with page=1', function() {
      return testZeroBased
        .get('/known-length?limit=2&page=1')
        .expect(200)
        .expect(function(res) {
          assert.deepEqual(res.body.items, data.slice(2, 4));
          assert.equal(res.body.page, 1);
        });
    });
    it('should get valid content/range/length for always query', function() {
      return testAlwaysRange
        .get('/known-length?limit=2&page=2')
        .expect(206)
        .expect(function(res) {
          assert.ok(res.headers['content-range']);
          return assert.deepEqual(res.body, data.slice(2, 4));
        });
    });
    it('should respect max limit', function() {
      return testAlwaysRange
        .get('/known-length?limit=100&offset=2')
        .expect(206)
        .expect(function(res) {
          assert.ok(res.headers['content-range']);
          return assert.deepEqual(res.body, data.slice(2, 23));
        });
    });
  });
}.call(this));
